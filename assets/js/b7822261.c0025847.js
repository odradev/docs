"use strict";(self.webpackChunkodra_docs=self.webpackChunkodra_docs||[]).push([[132],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>d});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=n.createContext({}),s=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=s(e.components);return n.createElement(p.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),f=s(t),d=o,m=f["".concat(p,".").concat(d)]||f[d]||u[d]||a;return t?n.createElement(m,i(i({ref:r},c),{},{components:t})):n.createElement(m,i({ref:r},c))}));function d(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var l={};for(var p in r)hasOwnProperty.call(r,p)&&(l[p]=r[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4153:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var n=t(7462),o=(t(7294),t(3905));const a={sidebar_position:1},i="Directory structure",l={unversionedId:"Basics/directory-structure",id:"Basics/directory-structure",title:"Directory structure",description:"Docusaurus creates a page for each blog post, but also a blog index page, a tag system, an RSS feed...",source:"@site/docs/Basics/directory-structure.md",sourceDirName:"Basics",slug:"/Basics/directory-structure",permalink:"/docs/Basics/directory-structure",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Basics/directory-structure.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Basics",permalink:"/docs/category/basics"},next:{title:"Modules",permalink:"/docs/Basics/modules"}},p={},s=[{value:"Let&#39;s flip a flipper",id:"lets-flip-a-flipper",level:2}],c={toc:s};function u(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"directory-structure"},"Directory structure"),(0,o.kt)("p",null,"Docusaurus creates a ",(0,o.kt)("strong",{parentName:"p"},"page for each blog post"),", but also a ",(0,o.kt)("strong",{parentName:"p"},"blog index page"),", a ",(0,o.kt)("strong",{parentName:"p"},"tag system"),", an ",(0,o.kt)("strong",{parentName:"p"},"RSS")," feed..."),(0,o.kt)("h2",{id:"lets-flip-a-flipper"},"Let's flip a flipper"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="Flipper.rs"',title:'"Flipper.rs"'},'use async_trait::async_trait;\nuse cucumber::{given, then, when, World, WorldInit};\nuse {{project-name}}::flipper::{Flipper, FlipperRef};\nuse std::convert::Infallible;\nuse std::fmt::Debug;\n\n#[derive(WorldInit)]\npub struct FlipperWorld {\n    flipper: Option<FlipperRef>,\n}\n\nimpl Debug for FlipperWorld {\n    fn fmt(&self, f: &mut std::fmt::Formatter<\'_>) -> std::fmt::Result {\n        write!(f, "FlipperWorld")\n    }\n}\n\n#[async_trait(?Send)]\nimpl World for FlipperWorld {\n    type Error = Infallible;\n    async fn new() -> Result<Self, Infallible> {\n        Ok(Self {\n            flipper: Some(Flipper::deploy()),\n        })\n    }\n}\n\n#[given(expr = "Flipper contract")]\nfn erc20_token_is_deployed(world: &mut FlipperWorld) {\n    world.flipper = Some(Flipper::deploy());\n}\n\n#[when(expr = "I flip it")]\nfn i_transfer_amount_symbol_to_address(world: &mut FlipperWorld) {\n    let flipper = world.flipper.as_ref().unwrap();\n    flipper.flip();\n}\n\n#[then(expr = "Its value is true")]\nfn its_value_is_true(world: &mut FlipperWorld) {\n    let flipper = world.flipper.as_ref().unwrap();\n    assert!(flipper.get());\n}\n\n#[then(expr = "Its value is false")]\nfn its_value_is_false(world: &mut FlipperWorld) {\n    let flipper = world.flipper.as_ref().unwrap();\n    assert!(!flipper.get());\n}\n\nfn main() {\n    futures::executor::block_on(FlipperWorld::run("tests/features/contracts"));\n}\n')))}u.isMDXComponent=!0}}]);