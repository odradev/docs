"use strict";(self.webpackChunkodra_docs=self.webpackChunkodra_docs||[]).push([[449],{3905:(e,t,r)=>{r.d(t,{Zo:()=>f,kt:()=>d});var n=r(7294);function p(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){p(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,p=function(e,t){if(null==e)return{};var r,n,p={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(p[r]=e[r]);return p}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(p[r]=e[r])}return p}var o=n.createContext({}),s=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},f=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,p=e.mdxType,l=e.originalType,o=e.parentName,f=i(e,["components","mdxType","originalType","parentName"]),u=s(r),d=p,m=u["".concat(o,".").concat(d)]||u[d]||c[d]||l;return r?n.createElement(m,a(a({ref:t},f),{},{components:r})):n.createElement(m,a({ref:t},f))}));function d(e,t){var r=arguments,p=t&&t.mdxType;if("string"==typeof e||p){var l=r.length,a=new Array(l);a[0]=u;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:p,a[1]=i;for(var s=2;s<l;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},8224:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=r(7462),p=(r(7294),r(3905));const l={sidebar_position:2},a="Flipper example",i={unversionedId:"Getting Started/flipper",id:"Getting Started/flipper",title:"Flipper example",description:"Docusaurus creates a page for each blog post, but also a blog index page, a tag system, an RSS feed...",source:"@site/docs/Getting Started/flipper.md",sourceDirName:"Getting Started",slug:"/Getting Started/flipper",permalink:"/Getting Started/flipper",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Getting Started/flipper.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/Getting Started/installation"},next:{title:"Architecture",permalink:"/category/architecture"}},o={},s=[{value:"Let&#39;s flip a flipper",id:"lets-flip-a-flipper",level:2}],f={toc:s};function c(e){let{components:t,...r}=e;return(0,p.kt)("wrapper",(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h1",{id:"flipper-example"},"Flipper example"),(0,p.kt)("p",null,"Docusaurus creates a ",(0,p.kt)("strong",{parentName:"p"},"page for each blog post"),", but also a ",(0,p.kt)("strong",{parentName:"p"},"blog index page"),", a ",(0,p.kt)("strong",{parentName:"p"},"tag system"),", an ",(0,p.kt)("strong",{parentName:"p"},"RSS")," feed..."),(0,p.kt)("h2",{id:"lets-flip-a-flipper"},"Let's flip a flipper"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="Flipper.rs"',title:'"Flipper.rs"'},'use async_trait::async_trait;\nuse cucumber::{given, then, when, World, WorldInit};\nuse {{project-name}}::flipper::{Flipper, FlipperRef};\nuse std::convert::Infallible;\nuse std::fmt::Debug;\n\n#[derive(WorldInit)]\npub struct FlipperWorld {\n    flipper: Option<FlipperRef>,\n}\n\nimpl Debug for FlipperWorld {\n    fn fmt(&self, f: &mut std::fmt::Formatter<\'_>) -> std::fmt::Result {\n        write!(f, "FlipperWorld")\n    }\n}\n\n#[async_trait(?Send)]\nimpl World for FlipperWorld {\n    type Error = Infallible;\n    async fn new() -> Result<Self, Infallible> {\n        Ok(Self {\n            flipper: Some(Flipper::deploy()),\n        })\n    }\n}\n\n#[given(expr = "Flipper contract")]\nfn erc20_token_is_deployed(world: &mut FlipperWorld) {\n    world.flipper = Some(Flipper::deploy());\n}\n\n#[when(expr = "I flip it")]\nfn i_transfer_amount_symbol_to_address(world: &mut FlipperWorld) {\n    let flipper = world.flipper.as_ref().unwrap();\n    flipper.flip();\n}\n\n#[then(expr = "Its value is true")]\nfn its_value_is_true(world: &mut FlipperWorld) {\n    let flipper = world.flipper.as_ref().unwrap();\n    assert!(flipper.get());\n}\n\n#[then(expr = "Its value is false")]\nfn its_value_is_false(world: &mut FlipperWorld) {\n    let flipper = world.flipper.as_ref().unwrap();\n    assert!(!flipper.get());\n}\n\nfn main() {\n    futures::executor::block_on(FlipperWorld::run("tests/features/contracts"));\n}\n')),(0,p.kt)("p",null,"A new blog post is now available at ",(0,p.kt)("a",{parentName:"p",href:"http://localhost:3000/blog/greetings"},"http://localhost:3000/blog/greetings"),"."))}c.isMDXComponent=!0}}]);